/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vhci;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.EventObject;
import java.util.List;
import java.util.Map;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputListener;
import org.jfree.data.category.DefaultCategoryDataset;
import org.joml.Matrix4f;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.lwjgl.opengl.awt.AWTGLCanvas;
import org.lwjgl.opengl.awt.GLData;
import vhci.GL.GLEventClassListener;
import vhci.GL.GLSimulation;
import vhci.GL.MousePicker.MousePicker;
import vhci.GL.MousePicker.MousePickerRay;
import vhci.GRACE.GRACEFileLoader;

/**
 *
 * @author Phr34z3r
 */
public class GLCanvasPanel extends javax.swing.JPanel implements MouseMotionListener,MouseWheelListener, MouseInputListener, KeyListener {

    private AWTGLCanvas canvas;
    private GLSimulation GLContext;
    
    private float theta;
    private float phi;
    
    private float targetTheta;
    private float targetPhi;
    
 
    
    private int currentLatitute;
    private int currentLongtitude;
    
    private int oldXMousePos;
    private int oldYMousePos;
    
    private int zoomMin = 0;
    private int zoomMax = 200;
    private int currentZoom = 0;
    private Vector3f targetZoom;
    private Vector3f currentZoomLerp;
    private Vector3f cameraStartPosition;
    private Vector2f GLPanelSize;
    
    private boolean KeyAltPressed = false;
    
    
    public GLCanvasPanel() {
        initComponents();
    }

    public void initCanvas(GRACEFileLoader grace){
        
        GLPanelSize = new Vector2f(this.getWidth(), this.getHeight());
        //GLPanelSize = new Vector2f(1920, 1080);
        targetZoom = new Vector3f();
        currentZoomLerp = new Vector3f();
        GLData data = new GLData();
        data.samples = 8;
        data.swapInterval = 60;
        data.majorVersion = 3;
        data.minorVersion = 2;
        data.profile = GLData.Profile.CORE;
                
        add(canvas = new AWTGLCanvas(data) {
           
          public void initGL() {
              System.out.println("OpenGL version: " + effective.majorVersion + "." + effective.minorVersion + " (Profile: " + effective.profile + ")");
              GLContext = new GLSimulation();
              GLContext.Initialize(grace, GLPanelSize);
              cameraStartPosition = GLContext.getSceneAccess().GetCamera().getRelativeLocation();
              this.setSize((int)GLPanelSize.x,(int)GLPanelSize.y);
              this.setVisible(true);
              
          }
          
          public void paintGL() {
              GLContext.run();
              setPlanetLerpRotation(GLContext.getDeltaTime(),10.0f);
              setCameraLerpZoom(GLContext.getDeltaTime(),10.0f);
              
              
              this.swapBuffers();
              this.repaint();
              GLContext.getDeltaTime();
              
          }
          
        });
        
        canvas.addMouseMotionListener(this);
        canvas.addMouseWheelListener(this);
        canvas.addMouseListener(this);
        canvas.addKeyListener(this);
                
        Runnable renderLoop = new Runnable() {
			public void run() {
				if (!canvas.isValid())
					return;
				canvas.render();
            
				SwingUtilities.invokeLater(this);
			}
		};
		SwingUtilities.invokeLater(renderLoop);
    }

        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if(GLContext != null){
            GLPanelSize = new Vector2f(this.getWidth(), this.getHeight());
            GLContext.setPanelSize((int)GLPanelSize.x, (int)GLPanelSize.y);
            canvas.setSize((int)GLPanelSize.x,(int)GLPanelSize.y);
            canvas.revalidate();
        } 
    }//GEN-LAST:event_formComponentResized

    @Override
    public void mouseDragged(MouseEvent e) {
        Vector2f MousePos = new Vector2f(e.getX(), e.getY());
         
        if( MousePos.x >= 0 && MousePos.x < (int)GLPanelSize.x && MousePos.y >= 0 && MousePos.y < (int)GLPanelSize.y )
        {
            theta += (float)Math.toRadians((e.getX() - oldXMousePos) * 0.1f);
            phi   += (float)Math.toRadians((oldYMousePos - e.getY()) * 0.1f);

            oldXMousePos = e.getX(); 
            oldYMousePos = e.getY();

            if(Math.toDegrees(phi) > 89.f)
                phi = (float)Math.toRadians(89.f);

            if(Math.toDegrees(phi)<-89.f)
                phi = (float)Math.toRadians(-89.f);

            targetTheta = theta;
            targetPhi = -phi;
    
            //GLContext.getSceneAccess().RotatePlanet(new Vector3f(phi,-theta,0));//phi,theta,0
            //GLContext.getSceneAccess().getPlanet().getRootComponent().setRelativeRotation(new Vector3f(-phi,theta,0));//phi,theta,0  
            //this.GLContext.getSceneAccess().getActiveCamera().getParent().addWorldRotation(new Vector3f(phi,-theta,0));
        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        oldXMousePos = e.getX(); 
        oldYMousePos = e.getY();
        
        if( KeyAltPressed )
        {
            Vector2f MousePos = new Vector2f(e.getX(), e.getY());
            if( MousePos.x >= 0 && MousePos.x < (int)GLPanelSize.x && MousePos.y >= 0 && MousePos.y < (int)GLPanelSize.y )
            {
                MousePicker Picker = new MousePicker();        
                MousePickerRay Ray = Picker.CastRay(this.GLContext.getSceneAccess().getActiveCamera(), new Vector2f((int)GLPanelSize.x, (int)GLPanelSize.y), new Vector2f(MousePos));

                List<Vector3f> vertices = this.GLContext.getSceneAccess().GetModel().getVertices();

                Vector3f bestVertex = null;
                float closestDistance = 10000;
                Vector3f closestVertex = new Vector3f(0,0,0);

                Matrix4f ModelMatrix = this.GLContext.getSceneAccess().getPlanetModelMatrix();

                for( Vector3f vertex : vertices)
                {
                    Vector4f transformedVector =  ModelMatrix.transform(new Vector4f(vertex, 1));
                    Vector3f currentVertex = new Vector3f(transformedVector.x, transformedVector.y, transformedVector.z);

                    float currentDistance = Picker.CalculateDistanceToPoint(Ray, new Vector3f(currentVertex) );
                    if( closestDistance > currentDistance ){

                        Vector3f CameraLocation = this.GLContext.getSceneAccess().getActiveCamera().getWorldTransform().getLocation();

                        float NewDistanceToCamera = new Vector3f(currentVertex).distance(this.GLContext.getSceneAccess().getActiveCamera().getWorldTransform().getLocation());
                        float OldDistanceToCamera = new Vector3f(closestVertex).distance(this.GLContext.getSceneAccess().getActiveCamera().getWorldTransform().getLocation());
                        if(  new Vector3f(currentVertex).dot(CameraLocation) > 0.5f )
                        {
                            closestDistance = currentDistance;
                            closestVertex = currentVertex;
                            bestVertex = vertex; 
                        }
                    }
                }

                Vector3f normalizedBestVertex = new Vector3f();
                closestVertex.normalize(normalizedBestVertex);

                currentLatitute = (int)((90 - (Math.acos(normalizedBestVertex.y / 1.0f)) * 180 / Math.PI)+90);
                currentLongtitude = (int)((((Math.atan2(-normalizedBestVertex.z, normalizedBestVertex.x )) * 180 / Math.PI))+180);  


                this.GLContext.getSceneAccess().getSelectedVertexActor().getRootComponent().setRelativeLocation( closestVertex );
                //this.GLContext.getSceneAccess().getActiveCamera().addRelativeRotation(new Vector3f(.01f,0,0));

                //System.out.println(this.GLContext.getSceneAccess().getActiveCamera().getWorldTransform().getLocation());
            }    
        }         
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent evt) {
        targetZoom.add(new Vector3f(0, 0, evt.getWheelRotation()*0.1f));
    }
    
    @Override
    public void mouseClicked(MouseEvent e) {        
        
        if( KeyAltPressed )
        {
            Map<String,Float> data = this.GLContext.GraceLoader.getWeightDataFromLongLat(currentLongtitude, currentLatitute);

            DefaultCategoryDataset dataset = new DefaultCategoryDataset( );

            for (Map.Entry<String, Float> entry : data.entrySet()) {
                String key = entry.getKey();
                Float value = entry.getValue();
                dataset.addValue( value , "water thickness" , key );    
            }

            DiagramFrame DiagramFrame = new DiagramFrame();
            DiagramFrame.setVisible(true);
            DiagramFrame.setLocationRelativeTo(null);
            DiagramFrame.updateChart(1,dataset, currentLongtitude, currentLatitute);
            
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    public int Zoom( int Value ){
        int newZoomVal = Value;
        if (newZoomVal > zoomMax) newZoomVal = zoomMax;        
        if (newZoomVal < zoomMin) newZoomVal = zoomMin;
        
        targetZoom = new Vector3f(0, 0, (3.0f * (zoomMax-(float)newZoomVal)/100.0f)).sub(new Vector3f(0,0,3));  

        currentZoom = newZoomVal;
        return currentZoom;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if( e.isAltDown() ){
            KeyAltPressed = true;
            this.GLContext.setRenderPolyline(KeyAltPressed);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {        
        if( !e.isAltDown() ){
            KeyAltPressed = false;
            this.GLContext.setRenderPolyline(KeyAltPressed);
            //this.GLContext.getSceneAccess().getSelectedVertexActor().getRootComponent().setRelativeLocation( new Vector3f(0,0,0) );
        }
    }
    
    public void registerAnimationListener( GLEventClassListener Listener){
        GLContext.TimerAnimation.addEventListener(Listener);
    }
    
    public void startAnimation(){
        GLContext.TimerAnimation.shouldPlay = true;        
    }
    
    public void pauseAnimation(){
        GLContext.TimerAnimation.shouldPlay = false;
    }
    
    public void setGraceDate( int index ){
        GLContext.GraceLoader.setCurrentData(index);
        this.GLContext.getSceneAccess().GetModel().changeData = true;
        GLContext.TimerAnimation.shouldPlay = false;
        GLContext.TimerAnimation.setNoLerp();
    }
    
    public void setNextGraceDate(  ){
        GLContext.GraceLoader.next();
        this.GLContext.getSceneAccess().GetModel().changeData = true;
        GLContext.TimerAnimation.shouldPlay = false;
        GLContext.TimerAnimation.setNoLerp();
    }
    
    public void setPreviousGraceDate(  ){
        GLContext.GraceLoader.previous();
        this.GLContext.getSceneAccess().GetModel().changeData = true;
        GLContext.TimerAnimation.shouldPlay = false;
        GLContext.TimerAnimation.setNoLerp();
    }
    
    public void setAnimationSpeed(float Value){        
        GLContext.getSceneAccess().setAnimationSpeed(Value);
    }
    
    public float getAnimationSpeed(){        
        return GLContext.getSceneAccess().getAnimationSpeed();
    }
    
    public Vector2f getMinMaxRange(){        
        return GLContext.getSceneAccess().getMinMaxRange();
    }
    
    public Vector2f getMinMaxColor(){
        return GLContext.getSceneAccess().getMinMaxColor();
    }
    
    public void setMinRange( float Value ){
        GLContext.getSceneAccess().changeMinRange(Value);
    }
    
    public void setMaxRange( float Value ){
        GLContext.getSceneAccess().changeMaxRange(Value);
    }
    
    public void setMinColor( float Value ){
        GLContext.getSceneAccess().changeMinColor(Value);
    }
    
    public void setMaxColor( float Value ){
        GLContext.getSceneAccess().changeMaxColor(Value);
    }
    
    public void setColorFadingFactor( float Value ){
        GLContext.getSceneAccess().setColorFading(Value);
    }
    
    public float getColorFadingFactor( ){
        return GLContext.getSceneAccess().getColorFading();
    }
    
    private void setPlanetLerpRotation(float deltaTime, float spd)
    {
        Vector3f rotation = GLContext.getSceneAccess().getPlanet().getRootComponent().getRelativeRotation();
        rotation.lerp(new Vector3f(targetPhi, targetTheta,0), deltaTime*spd);
        GLContext.getSceneAccess().getPlanet().getRootComponent().setRelativeRotation(rotation);
    }
    
    private void setCameraLerpZoom(float deltaTime, float spd)
    {
        
        currentZoomLerp.lerp(targetZoom, deltaTime*spd);
        GLContext.getSceneAccess().GetCamera().setRelativeLocation(new Vector3f(cameraStartPosition).add(currentZoomLerp)); 
    }
    
    /*
    public void getDisplacementFactor( float Value ){
        GLContext.getSceneAccess().changeMaxColor(Value);
    }
    
    public void setDisplacementFactor( float Value ){
        GLContext.getSceneAccess().changeMaxColor(Value);
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
